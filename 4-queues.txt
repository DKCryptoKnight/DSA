Algorithm: Queue Operations

1. Initialize an array of size MAX to implement the queue.
2. Initialize rear variable to -1.
3. Define the isFull() function to check if the queue is full.
4. Define the isEmpty() function to check if the queue is empty.
5. Define the makeEmpty() function to make the queue empty.
6. Define the enqueue() function to add an element to the queue.
7. Define the dequeue() function to remove an element from the queue.
8. Define the display() function to display the elements of the queue.
9. Use a menu-driven approach to allow the user to choose the operation they want to perform.
10. Call the corresponding function based on the user's choice.
11. Repeat steps 9-10 until the user chooses to exit.

--------------------------------------------------------------------------------------------------------------
Here are the individual algorithms for the three queues you have mentioned:


* **Linear Queue**

def isFull():
    return rear == MAX - 1

def isEmpty():
    return rear == -1

def makeEmpty():
    rear = -1

def enqueue(data):
    if isFull():
        print("Queue is full")
    else:
        if rear == -1:
            front = 0
        rear += 1
        queue[rear] = data
        print("%d added to the queue" % data)

def dequeue():
    if isEmpty():
        print("Queue is empty")
    else:
        print("%d removed from the queue" % queue[front])
        front += 1

def display():
    if isEmpty():
        print("Queue is empty")
    else:
        print("Queue elements are:")
        for i in range(front, rear + 1):
            print("%d " % queue[i])
        print()



* **Circular Queue**

def isFull():
    return (front == 0 and rear == MAX - 1) or (front == rear + 1)

def isEmpty():
    return front == -1

def makeEmpty():
    front = -1
    rear = -1

def enqueue(data):
    if isFull():
        print("Queue is full")
    else:
        if front == -1:
            front = 0
        rear = (rear + 1) % MAX
        queue[rear] = data
        print("%d added to the queue" % data)

def dequeue():
    if isEmpty():
        print("Queue is empty")
    else:
        print("%d removed from the queue" % queue[front])
        if front == rear:
            front = -1
            rear = -1
        else:
            front = (front + 1) % MAX

def display():
    if isEmpty():
        print("Queue is empty")
    else:
        print("Queue elements are:")
        i = front
        while i != rear:
            print("%d " % queue[i])
            i = (i + 1) % MAX
        print("%d" % queue[rear])



* **Priority Queue**

def isFull():
    return rear == MAX - 1

def isEmpty():
    return rear == -1

def makeEmpty():
    rear = -1

def enqueue(data):
    if isFull():
        print("Queue is full")
    else:
        i = rear
        for i in range(rear, -1, -1):
            if data > queue[i]:
                queue[i + 1] = queue[i]
            else:
                break
        queue[i + 1] = data
        rear += 1
        print("%d added to the queue" % data)

def dequeue():
    if isEmpty():
        print("Queue is empty")
    else:
        print("%d removed from the queue" % queue[rear])
        rear -= 1

def display():
    if isEmpty():
        print("Queue is empty")
    else:
        print("Queue elements are:")
        for i in range(rear, -1, -1):
            print("%d " % queue[i])
        print()

----------------------------------------------Linear Queue----------------------------------------------------

#include <stdio.h>
#define MAX 5

int queue[MAX];
int front = -1, rear = -1;

int isFull() {
    return rear == MAX - 1;
}

int isEmpty() {
    return front == -1 || front > rear;
}

void makeEmpty() {
    front = -1;
    rear = -1;
}

void enqueue(int data) {
    if (isFull()) {
        printf("Queue is full\n");
    } else {
        if (front == -1) {
            front = 0;
        }
        rear++;
        queue[rear] = data;
        printf("%d added to the queue\n", data);
    }
}

void dequeue() {
    if (isEmpty()) {
        printf("Queue is empty\n");
    } else {
        printf("%d removed from the queue\n", queue[front]);
        front++;
    }
}

void display() {
    if (isEmpty()) {
        printf("Queue is empty\n");
    } else {
        printf("Queue elements are:\n");
        for (int i = front; i <= rear; i++) {
            printf("%d ", queue[i]);
        }
        printf("\n");
    }
}

int main() {
    int choice, data;
    while (1) {
        printf("1. Enqueue\n2. Dequeue\n3. Display\n4. Make Empty\n5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter data to enqueue: ");
                scanf("%d", &data);
                enqueue(data);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                makeEmpty();
                printf("Queue is made empty\n");
                break;
            case 5:
                return 0;
            default:
                printf("Invalid choice\n");
        }
    }
}


----------------------------------------------Circular Queue----------------------------------------------------

#include <stdio.h>
#define MAX 5

int cqueue[MAX];
int front = -1, rear = -1;

int isFull() {
    return (front == 0 && rear == MAX - 1) || (front == rear + 1);
}

int isEmpty() {
    return front == -1;
}

void makeEmpty() {
    front = -1;
    rear = -1;
}

void enqueue(int data) {
    if (isFull()) {
        printf("Queue is full\n");
    } else {
        if (front == -1) {
            front = 0;
        }
        rear = (rear + 1) % MAX;
        cqueue[rear] = data;
        printf("%d added to the queue\n", data);
    }
}

void dequeue() {
    if (isEmpty()) {
        printf("Queue is empty\n");
    } else {
        printf("%d removed from the queue\n", cqueue[front]);
        if (front == rear) {
            front = -1;
            rear = -1;
        } else {
            front = (front + 1) % MAX;
        }
    }
}

void display() {
    if (isEmpty()) {
        printf("Queue is empty\n");
    } else {
        printf("Queue elements are:\n");
        int i = front;
        while (i != rear) {
            printf("%d ", cqueue[i]);
            i = (i + 1) % MAX;
        }
        printf("%d\n", cqueue[rear]);
    }
}

int main() {
    int choice, data;
    while (1) {
        printf("1. Enqueue\n2. Dequeue\n3. Display\n4. Make Empty\n5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter data to enqueue: ");
                scanf("%d", &data);
                enqueue(data);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                makeEmpty();
                printf("Queue is made empty\n");
                break;
            case 5:
                return 0;
            default:
                printf("Invalid choice\n");
        }
    }
}



----------------------------------------------Priority Queue----------------------------------------------------


#include <stdio.h>
#define MAX 5

int pqueue[MAX];
int rear = -1;

int isFull() {
    return rear == MAX - 1;
}

int isEmpty() {
    return rear == -1;
}

void makeEmpty() {
    rear = -1;
}

void enqueue(int data) {
    if (isFull()) {
        printf("Queue is full\n");
    } else {
        int i;
        for (i = rear; i >= 0; i--) {
            if (data > pqueue[i]) {
                pqueue[i + 1] = pqueue[i];
            } else {
                break;
            }
        }
        pqueue[i + 1] = data;
        rear++;
        printf("%d added to the queue\n", data);
    }
}

void dequeue() {
    if (isEmpty()) {
        printf("Queue is empty\n");
    } else {
        printf("%d removed from the queue\n", pqueue[rear]);
        rear--;
    }
}

void display() {
    if (isEmpty()) {
        printf("Queue is empty\n");
    } else {
        printf("Queue elements are:\n");
        for (int i = rear; i >= 0; i--) {
            printf("%d ", pqueue[i]);
        }
        printf("\n");
    }
}

int main() {
    int choice, data;
    while (1) {
        printf("1. Enqueue\n2. Dequeue\n3. Display\n4. Make Empty\n5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter data to enqueue: ");
                scanf("%d", &data);
                enqueue(data);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                makeEmpty();
                printf("Queue is made empty\n");
                break;
            case 5:
                return 0;
            default:
                printf("Invalid choice\n");
        }
    }
}
